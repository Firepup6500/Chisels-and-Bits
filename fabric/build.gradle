plugins {
    id 'fabric-loom'
    id 'net.darkhax.curseforgegradle'
}

project.addApiProject()
project.addCoreProject()

project.dependencies.minecraft "com.mojang:minecraft:${project.minecraftVersion}"
project.dependencies.modImplementation "net.fabricmc:fabric-loader:${project.fabricLoaderVersion}"
project.dependencies.modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricVersion}+${project.minecraftVersion}"
project.dependencies.modImplementation "com.communi-suggestu.scena:fabric:${project.scenaVersion}"
project.dependencies.implementation "org.lz4:lz4-pure-java:${project.lz4Version}"

project.dependencies.include "org.lz4:lz4-pure-java:${project.lz4Version}"

project.dependencies.include "com.communi-suggestu.scena:fabric:${project.scenaVersion}"

project.dependencies.mappings loom.layered() { layer ->
    layer.officialMojangMappings()
    layer.parchment("org.parchmentmc.data:parchment-${project.parchmentMinecraftVersion}:${project.parchmentVersion}@zip")
}

project.loom.accessWidenerPath = project(':common').file("accesswidener.accesswidener")
project.tasks.processResources.from project(':common').file("accesswidener.accesswidener")
setupResourceProcessing(project.tasks.processResources)

project.remapJar.addNestedDependencies = true

project.loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("runs/client")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("runs/server")
        }
    }
}



if ((opc.hasPropertySet("curseApiKey") || opc.hasPropertySet("CURSEAPIKEY"))) {
    task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        apiToken = opc.hasPropertySet("curseApiKey") ? opc.getProperty("curseApiKey") : opc.getProperty("CURSEAPIKEY")

        def mainArtifact = upload("561059", tasks.remapJar)
        opc.getStringListProperty("additionalMinecraftVersions").each { v ->
            mainArtifact.addGameVersion(v)
        }

        mainArtifact.releaseType = opc.hasPropertySet("curseReleaseType") ? opc.getProperty("curseReleaseType") : opc.getProperty("CURSERELEASETYPE")
        if (opc.isFeatureEnabled('reformatedCurseFiles')) {
            def mainArtifactName = rootProject.name
            if (opc.isFeatureEnabled('customCurseFileName')) {
                mainArtifactName = opc.getProperty('customCurseFileName')
            }

            mainArtifact.displayName = mainArtifactName + " - " + project.version + " - " + mainArtifact.releaseType
        }

        mainArtifact.changelog = file('build/changelog.md')
        mainArtifact.changelogType = 'markdown'

        dependsOn rootProject.tasks.createChangelog
    }
}